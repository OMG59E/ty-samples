cmake_minimum_required(VERSION 2.8.12)
project(dcl_wrapper C CXX)

set(SDK_PATH $ENV{DENGINE_ROOT}/tyhcp)

if ("${RUN_TYPE}" STREQUAL "ONCHIP")
    set(CMAKE_CXX_COMPILER $ENV{ARM_CXX_COMPILER})
    set(CMAKE_C_COMPILER $ENV{ARM_C_COMPILER})
endif()

set(COMMON_COMPILER_FLAG "-w -fPIC")

if ("${RUN_TYPE}" STREQUAL "ONCHIP")
    set(COMMON_COMPILER_FLAG "${COMMON_COMPILER_FLAG} -mfloat-abi=hard $ENV{ARM_CXX_FLAGS}")
endif()

if (${CMAKE_BUILD_TYPE} STREQUAL "Debug")
    set(CMAKE_CXX_FLAGS "-O0 -g -std=c++11 ${COMMON_COMPILER_FLAG} ${CMAKE_CXX_FLAGS}")
else()
    set(CMAKE_CXX_FLAGS "-O2 -std=c++11 ${COMMON_COMPILER_FLAG} ${CMAKE_CXX_FLAGS}")
endif()

if ("${RUN_TYPE}" STREQUAL "ONCHIP")
    set(SDK_LIB_PATH ${SDK_PATH}/platform/$ENV{CROSS_PLAT}/lib/dynamic)
    set(3RD_LIB_PATH $ENV{DENGINE_ROOT}/tyexamples/3rdparty/$ENV{THIRDPARTY_PREFIX}/$ENV{CROSS_PLAT}/lib/dynamic)
    set(OPENCV_PATH 3rdparty/opencv)
    add_definitions(-DDP2000)
else()
    set(SDK_LIB_PATH ${SDK_PATH}/platform/linux-x64-gcc7.5/lib/dynamic)
    set(OPENCV_PATH /usr/local)
    add_definitions(-Dx86_64)
endif()

include_directories(src/graph/include)
include_directories(src/common)
include_directories(src/utils)
include_directories(src)
include_directories(${SDK_PATH}/include)
include_directories(${OPENCV_PATH}/include)
link_directories(${SDK_LIB_PATH} ${3RD_LIB_PATH})
link_directories(${OPENCV_PATH}/lib)

add_subdirectory(src)
add_subdirectory(examples)

list(APPEND SDK_LIBS dcl_memory)
list(APPEND SDK_LIBS dcl_runtime)
list(APPEND SDK_LIBS dcl_utils)
list(APPEND SDK_LIBS drv_dp2000)
list(APPEND SDK_LIBS dcl_ioctl)
list(APPEND SDK_LIBS stream_sched)
list(APPEND SDK_LIBS mdl_parse)
list(APPEND OPENCV_LIBS opencv_core)
list(APPEND OPENCV_LIBS opencv_imgproc)
list(APPEND OPENCV_LIBS opencv_imgcodecs)
if (NOT $ENV{NNP} STREQUAL "nnp310")
    list(APPEND SDK_LIBS tvm_runtime)
    list(APPEND SDK_LIBS desdk_data_dump_client)
endif()

add_library(${PROJECT_NAME} SHARED ${DCL_SOURCES})
# set(CMAKE_INSTALL_PREFIX ${SDK_LIB_PATH})
# INSTALL(TARGETS ${PROJECT_NAME} LIBRARY DESTINATION .)


if ("${RUN_TYPE}" STREQUAL "ONCHIP")
    list(APPEND SDK_LIBS mpi)
if ("$ENV{THIRDPARTY_PREFIX}" STREQUAL "fullhan")
    list(APPEND SDK_LIBS dsp)
    list(APPEND SDK_LIBS vmm)
endif()
else()
    list(APPEND SDK_LIBS drv_cpu_simu)
if ("$ENV{THIRDPARTY_PREFIX}" STREQUAL "fullhan")
    list(APPEND SDK_LIBS dpmedia)
endif()
    list(APPEND OPENCV_LIBS opencv_highgui)
endif()
target_link_libraries(${PROJECT_NAME} ${SDK_LIBS} ${OPENCV_LIBS} pthread dl)

foreach(EXAMPLE_NAME ${EXAMPLE_SOURCES})
    #unpack the dir "/"
    string(REPLACE "/" ";" SEXY_LIST ${EXAMPLE_NAME})
    list(GET SEXY_LIST -1 TEST_CASE_NAME)
    #get the file name without suffix
    string(REPLACE "." ";" SEXY_LIST ${TEST_CASE_NAME})
    list(GET SEXY_LIST 0 TEST_CASE_NAME)
    add_executable(${TEST_CASE_NAME} ${EXAMPLE_NAME})
    target_link_libraries(${TEST_CASE_NAME} ${PROJECT_NAME})
    set_target_properties(${TEST_CASE_NAME} PROPERTIES RUNTIME_OUTPUT_DIRECTORY .)
endforeach()
